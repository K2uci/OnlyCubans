# Generated by Django 4.2.11 on 2025-09-21 17:27

import accounts.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('regular', 'Usuario Regular'), ('creator', 'Creador de Contenido'), ('admin', 'Administrador')], default='regular', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe tener el formato: '+999999999'. Hasta 15 dígitos.", regex='^\\+?1?\\d{9,15}$')])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Masculino'), ('female', 'Femenino'), ('other', 'Otro'), ('prefer_not_to_say', 'Prefiero no decir')], max_length=20)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('profile_picture', models.ImageField(blank=True, upload_to=accounts.models.profile_image_path)),
                ('cover_photo', models.ImageField(blank=True, upload_to=accounts.models.cover_image_path)),
                ('website', models.URLField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_banned', models.BooleanField(default=False)),
                ('show_birthdate', models.BooleanField(default=False)),
                ('show_gender', models.BooleanField(default=False)),
                ('followers_count', models.PositiveIntegerField(default=0)),
                ('following_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription_price', models.DecimalField(decimal_places=2, default=0.0, help_text='Precio mensual de suscripción para creadores', max_digits=10)),
                ('has_active_subscription_model', models.BooleanField(default=False, help_text='Indica si el creador acepta suscriptores pagados')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=False)),
                ('notify_new_follower', models.BooleanField(default=True)),
                ('notify_new_message', models.BooleanField(default=True)),
                ('notify_likes', models.BooleanField(default=True)),
                ('notify_comments', models.BooleanField(default=True)),
                ('notify_mentions', models.BooleanField(default=True)),
                ('profile_private', models.BooleanField(default=False)),
                ('show_online_status', models.BooleanField(default=True)),
                ('allow_messages_from', models.CharField(choices=[('everyone', 'Todos'), ('followed', 'Solo seguidores'), ('none', 'Nadie')], default='everyone', max_length=20)),
                ('show_sensitive_content', models.BooleanField(default=False)),
                ('language', models.CharField(default='es', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CreatorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage_name', models.CharField(blank=True, max_length=100)),
                ('category', models.CharField(blank=True, max_length=50)),
                ('tags', models.CharField(blank=True, help_text='Etiquetas separadas por comas', max_length=200)),
                ('about', models.TextField(blank=True, max_length=1000)),
                ('content_preview', models.TextField(blank=True, help_text='Breve descripción del contenido que ofrece', max_length=500)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('total_subscribers', models.PositiveIntegerField(default=0)),
                ('content_count', models.PositiveIntegerField(default=0)),
                ('welcome_message', models.TextField(blank=True, help_text='Mensaje de bienvenida para nuevos suscriptores', max_length=500)),
                ('payout_method', models.CharField(blank=True, choices=[('bank_transfer', 'Transferencia Bancaria'), ('paypal', 'PayPal'), ('crypto', 'Criptomoneda')], max_length=20)),
                ('payout_email', models.EmailField(blank=True, max_length=254)),
                ('id_verified', models.BooleanField(default=False)),
                ('age_verified', models.BooleanField(default=False)),
                ('accepts_terms', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='creator_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FollowerRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_paid_subscription', models.BooleanField(default=False)),
                ('subscription_start', models.DateTimeField(blank=True, null=True)),
                ('subscription_end', models.DateTimeField(blank=True, null=True)),
                ('subscription_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relationships', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relationships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['follower', 'following'], name='accounts_fo_followe_b4d70c_idx'), models.Index(fields=['following', 'follower'], name='accounts_fo_followi_29e279_idx')],
                'unique_together': {('follower', 'following')},
            },
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
                ('blocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('blocker', 'blocked')},
            },
        ),
    ]
